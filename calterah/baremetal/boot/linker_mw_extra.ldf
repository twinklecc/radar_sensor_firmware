#line 1 "embarc_osp/board/ref_design/linker_template_mw.ld"
#line 1 "<built-in>"
#line 1 "embarc_osp/board/ref_design/linker_template_mw.ld"

#line 1 "./embarc_osp/chip/alps/configs/MP\\target_mem_config.h"
#line 33 "./embarc_osp/chip/alps/configs/MP\\target_mem_config.h"
#line 1 "./embarc_osp/inc/arc\\arc_feature_config.h"
#line 46 "./embarc_osp/inc/arc\\arc_feature_config.h"
#line 1 "./obj_alpsMP_ref_design_v1_sensor/mw_arcem6/embARC_generated\\core_config.h"
#line 46 "./embarc_osp/inc/arc\\arc_feature_config.h"
#line 33 "./embarc_osp/chip/alps/configs/MP\\target_mem_config.h"
#line 2 "embarc_osp/board/ref_design/linker_template_mw.ld"


MEMORY {
 ICCM : ORIGIN = 0x100000, LENGTH = 0x8000
 EXT_ROM : ORIGIN = 0x770000, LENGTH = 0x10000
 EXT_RAM : ORIGIN = 0xa00000, LENGTH = 0x8000
}

ENTRY(_start)

SECTIONS {

 GROUP : {
  .init_bootstrap:{
   *(.init_vector)
   *(.init_bootstrap)
  }
  .vector ALIGN(1024): {
   _f_vector = .;
   *(.vector)
   _e_vector = .;
  }
 } > ICCM

 GROUP : {

  .text ALIGN(4): {
   _f_text = .;
   *(.init .init$999999)
   *(.fini .fini$999999)
   arc_exception.o (.text)
   arc_cxx_support.o (.text)
   arc_exc_asm.o (.text)
   tiny_main.o (.text)
   crc32.o (.text)
   _e_text = .;
  }
 } > ICCM

 GROUP : {
  .part2_text ALIGN(4): {
   _f_part2_text = .;
   *(TYPE text)
   _e_part2_text = .;
  }
 } > EXT_ROM

 GROUP ALIGN(4): {
  .rodata ALIGN(4): {
   _f_rodata = .;

   _fctors = .;
   *(.ctors*)
   _ectors = .;
   _fdtors = .;
   *(.dtors*)
   _edtors = .;
   _feh_frame = .;
   *(.eh_frame*)
   _eeh_frame = .;

   *(TYPE lit)

   _e_rodata = .;
  }

 } > ICCM


 GROUP : {
  .nvm_header ALIGN(8): {
   *(.nvm_header)
  }
  .data ALIGN(8): {
   _f_data = .;
   _f_sdata = .;
   *(.sdata)
   _e_sdata = .;
   *(TYPE data)
  }
  .tls ALIGN(8): {
   *(.tls*)
   _e_data = .;
  }
 } > EXT_RAM AT > ICCM

 GROUP (NOLOAD) : {
  .bss ALIGN(8): {
   _f_bss = .;
   *(TYPE bss)
   _e_bss = .;
  }
  .stack ALIGN(4) SIZE(4096): {}
  .heap? ALIGN(4) SIZE(4): {}
 } > EXT_RAM

 _f_stack = ADDR(.stack);
 _e_stack = ADDR(.stack) + SIZEOF(.stack);
 _f_heap = ADDR(.heap);
 _e_heap = ADDR(.heap) + SIZEOF(.heap);

 _load_addr_text = LOADADDR(.text);
 _load_addr_rodata = LOADADDR(.rodata);
 _load_addr_data = LOADADDR(.data);
}
